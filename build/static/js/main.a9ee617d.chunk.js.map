{"version":3,"sources":["components/Header.js","components/ToggleArrow.js","components/Faq.js","components/Footer.js","components/Slider.js","components/Selection.js","components/Meats.js","components/Salts.js","components/getStringifiedOutput.js","components/Output.js","components/About.js","components/Radios.js","components/SaltForm.js","components/App.js","index.js"],"names":["Header","className","to","href","ToggleArrow","question","id","xmlns","height","viewBox","width","d","fill","QandAList","Faq","Object","entries","map","QandA","Accordion","Card","Toggle","as","eventKey","onClick","chevron","document","getElementById","classList","contains","remove","add","Collapse","Body","Footer","title","src","alt","Slider","meatTypeObj","meatType","callback","useState","value","setValue","useEffect","defaultSaltByWeight","defaultValue","calculation","localStorage","getItem","parsedCalculation","JSON","parse","timestamp","weightValue","weightType","toLowerCase","saltType","saltByWeight","lastCalculation","onChange","e","target","currentTarget","tooltipLabel","currentValue","type","tooltip","step","min","max","variant","Selection","radioOptions","radioValue","setRadioValue","renderTitle","Form","renderButtonContent","radio","renderIcon","icon","renderSubtext","subtext","name","style","animation","ButtonGroup","toggle","idx","ToggleButton","checked","RenderSubList","meatInstructionBasic","meatInstruction","meatInstructionGround","fishInstruction","Meats","Poultry","img","instruction","resources","Beef","Pork","Lamb","Seafood","Salts","gramsPerTbsp","getStringifiedOutput","tbsps","cups","tsps","cupsCalc","num","quarters","Math","floor","sixths","roundDownToNearestQuarterOrThird","tbspsCalc","half","whole","roundDownToNearestHalfOrWhole","abs","round","output","formatString","measurement","toFixed","replace","slice","push","length","join","Output","meatCategory","querySelector","innerHTML","weightInGrams","getTbsps","Title","Text","undefined","Number","Button","size","Date","toDateString","setItem","stringify","saveCalculation","arr","resource","renderResources","About","getMeatTypeRadios","keys","meat","SaltForm","setMeatCategory","setMeatType","setWeightValue","setWeightType","setSaltType","setSaltByWeight","category","Control","inputmode","salt","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.a9ee617d.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\n\nconst Header = () => {\n  return (\n    <header>\n      <h1 className=\"logo\">Salt Your Meat</h1>\n      <nav>\n        <Link to=\"/\">Calculator</Link>\n        <Link to=\"/faq\">Dry Brining FAQs</Link>\n        <a href=\"/#about\">About</a>\n      </nav>\n      <hr />\n    </header>\n  )\n}\n\nexport default Header","import React from 'react';\n\nconst ToggleArrow = ({question}) => {\n    return (\n      <svg id={question} className=\"closed\" xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M8 5v14l11-7z\"/></svg>\n    )\n}\n\nexport default ToggleArrow","import React, {useState} from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport ToggleArrow from './ToggleArrow'\n\n\nconst QandAList = {\n  'What does salt do to meat?': 'When you give salt enough time to work its magic, it can do wonders for whatever meat dish you are cooking. Salt doesn\\'t just make your food saltier, it brings out natural flavors, improves texture, and can even make the meat jucier. Salt changes the shape of proteins, allowing the meat to hold more water. This results in a jucier and more tender bite.',\n  'When should I salt my meat?': 'In most cases, you\\'ll want to dry brine your meat about a day in advance. This applies to pretty much any cut of beef, pork, or poultry (turkey can be 2-3 days). For fish, salting too far in advance can break down the proteins and dry out the fish, so you\\'ll want to salt no more than 10 minutes before cooking. While you should still be salting ground meat, you don\\'t have to do it so far in advance because you\\'re able to mix the salt in. 10+ minutes before cooking is just fine!',\n  'What is a dry brine? How does it compare to a wet brine?': 'A traditional brine, or wet brine, is soaking something in salty water. \"Dry brining\" is just another way of saying salting meat in advance. When roasting birds, you\\'re usually after some crispy skin. For steaks, a nice crust is desired. Dry surface = nice browning. A salt rub and some time in the fridge (40 min - 24 hrs) will help dry out the surface, which helps you get that super crispy roasted chicken or perfectly browned steak. On the flip side, if you salt a steak right before cooking, osmosis can actually pull water out towards the surface of the steak, making it harder to brown. Giving the meat more time allows the water to get reabsorbed into the steak, allowing you to nicely brown the surface while retaining extra moisture within. If you\\'re finishing a steak, consider flaky salt or pink himalayan. For baking, sea salt\\'s fineness will help prevent salt pockets.',\n  'What kind of salt should I use and why?':'The type of salt you should use depends on what context you are salting your food. The premise of this website is to help you with salting your meat in advance. For this purpose, kosher salt is your best bet. It\\'s harder to over season with it because it has a lower salinity (table salt weights 18.6 grams per tbsp, but Diamond kosher weighs 9.75), and the shape and size of its crystals make it easy to pinch and sprinkle. That being said, any salt is better than no salt, so don\\'t fret if table salt is all you have; it\\'ll work just fine as long as you use the right amount. '\n}\n\nconst Faq = () => {\n  const renderFAQ = () => {\n    return Object.entries(QandAList).map((QandA)=>{\n      return (\n        <div key={QandA[0]}>\n          <Accordion>\n            <Card>\n              {/* To toggle open and closed chevrons. It's a bit messy but it works. */}\n              <Accordion.Toggle as={Card.Header} eventKey={QandA[0]} onClick={\n                ()=>{\n                  const chevron = document.getElementById(`${QandA[0]}`)\n                  if (chevron.classList.contains('open')) {\n                    chevron.classList.remove('open')\n                    chevron.classList.add('closed')\n                  } else {\n                    chevron.classList.remove('closed')\n                    chevron.classList.add('open')\n                  }\n                }\n              }>\n                <div className=\"arrowContainer\">\n                <ToggleArrow question={QandA[0]}/>\n                </div>\n                \n                <h3>{QandA[0]}</h3>\n              </Accordion.Toggle>\n              <Accordion.Collapse eventKey={QandA[0]}>\n                <Card.Body>{QandA[1]}</Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className=\"faq\">{renderFAQ()}</div>\n  )\n}\n\nexport default Faq\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer>\n        <p>Made with ❤️ from Seattle</p>\n        <p>Icons by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a></p>\n        <a href=\"https://www.buymeacoffee.com/willliuwillliu\"><img className=\"buymeacoffee\" src=\"https://cdn.buymeacoffee.com/buttons/v2/default-white.png\" alt=\"Buy Me A Coffee\" /></a>\n    </footer>\n  )\n}\n\nexport default Footer\n\n","import React, {useState, useEffect} from 'react'\nimport 'bootstrap/dist/css/bootstrap.css'; // or include from a CDN\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n  \nconst Slider =  ({ meatTypeObj, meatType , title, callback}) => {\n\n\n  const [ value, setValue ] = useState(1);\n\n  // Sets default based on meat type input \n  useEffect(()=>{\n    if(meatTypeObj) {\n      setValue(meatTypeObj.defaultSaltByWeight)\n      callback(meatTypeObj.defaultSaltByWeight)\n    }\n  },[meatTypeObj])\n\n\n\n  const defaultValue = meatTypeObj ? meatTypeObj.defaultSaltByWeight : null\n\n  const lastCalculation = () => {\n    // Meat type here is an object\n    if (meatType) {\n      const calculation = localStorage.getItem(meatType)\n      if (calculation) {\n        const parsedCalculation = JSON.parse(calculation)\n        return `Last time (${parsedCalculation.timestamp}) you cooked ${parsedCalculation.weightValue} ${parsedCalculation.weightType.toLowerCase()} of ${parsedCalculation.meatType.toLowerCase()} with ${parsedCalculation.saltType.toLowerCase()} at a ${parsedCalculation.saltByWeight}% salt by weight.`\n      } else {\n        return null\n      }\n    }\n\n  }\n\n  return (\n    <>\n    <h3 className=\"formTitle\">{title}</h3>\n    <p className=\"lastCalculation\"><i>{lastCalculation()}</i></p>\n    <RangeSlider\n      value={value}\n      onChange={\n        e => {\n          setValue(e.target.value)\n          callback(e.currentTarget.value)\n        }\n      }\n      tooltipLabel={(currentValue) => currentValue === defaultValue ? `${currentValue}% salinity is recommended for ${meatTypeObj.type.toLowerCase()}` : `${currentValue}%`}\n      tooltip=\"on\"\n      step={0.05}\n      min={0}\n      max={3}\n      variant='light'\n    />\n    <div className=\"sliderLabels\">\n      <span className=\"accent\"> ← Less Salty</span>\n      <span className=\"accent\">More Salty →</span>\n    </div>\n    </>\n  );\n\n};\n\nexport default Slider","import React, {useState} from 'react';\nimport Form from 'react-bootstrap/Form'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport { ReactSVG } from 'react-svg'\n\nconst Selection = ({radioOptions, callback, title}) => {\n\n  // const [checked, setChecked] = useState(false);\n  const [radioValue, setRadioValue] = useState(null);\n  \n  function RenderSubList() {\n\n    const renderButtonContent = (radio) => {\n      const renderIcon = radio.icon ? (<ReactSVG className=\"buttonIcon\" src={radio.icon} />) : null\n      const renderSubtext = radio.subtext ? (<span className=\"radioButtonSubtext\">{radio.subtext}</span>) : null\n      return (<div className=\"radioButton\">  {renderIcon} {radio.name} {renderSubtext} </div>)\n    }\n\n    if (radioOptions) {\n      return (\n        <>\n        <div style={{animation: \"fadeIn 1s\"}}>\n        {renderTitle()}\n          <ButtonGroup toggle>\n            {radioOptions.map((radio, idx) => (\n              <ToggleButton\n                key={idx}\n                type=\"radio\"\n                variant=\"outline-secondary\"\n                name=\"radio\"\n                value={radio.value}\n                checked={radioValue === radio.value}\n                onChange={(e) => {\n                  setRadioValue(e.currentTarget.value)\n                  callback(e.currentTarget.value)\n                }}\n              >\n              {renderButtonContent(radio)}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div>\n    \n        </>\n      );\n    }\n  }\n\n  // Have to render title, otherwise field without title will have an empty H3\n  function renderTitle() {\n    if (title) {\n      return <h3 className=\"formTitle\">{title}</h3>\n    }\n  }\n\n  return (    \n    <div>\n      <Form>\n        {RenderSubList()}\n      </Form>\n    </div>\n  )\n}\n\nexport default Selection","\nconst meatInstructionBasic = 'Salt at least 40 min before and up to 48 hours before cooking.'\nconst meatInstructionRoast = 'Salt at least 24 hours before and up to 48 hours before cooking. If you are roasting the bird, put it on a wire rack and leave it uncovered in the fridge to dry the exterior. Once you take it out of the fridge, spray or rub olive oil all over the bird and then apply any other spices/herbs you like. This will help you develop a nice crust!'\nconst meatInstruction = 'Salt at least 40 min before and up to 48 hours before cooking. If you\\'re going to pan sear or grill, put it on a wire rack and leave it in the fridge uncovered to dry the exterior. This will help you develop a nice crust!'\nconst meatInstructionGround = `You shouldn\\'t really be dry brining ground meat because dry brining can make the texture rubbery (see \"Salting Ground Beef\" below).`\nconst fishInstruction = 'You don\\'t need to brine fish for very long, the salt can break down the proteins too much over time. Salt the fish 15 minutes before cooking.'\n\nexport const Meats = {\n  Poultry: {\n    'Breast': {\n      type: 'Boneless Poultry',\n      defaultSaltByWeight: 1,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/1728/1728818.svg',\n      instruction: meatInstructionBasic,\n      resources: {\n        'The Food Lab\\'s Complete Guide to Sous Vide Chicken Breast': 'https://www.seriouseats.com/2015/07/the-food-lab-complete-guide-to-sous-vide-chicken-breast.html',\n        '28 Chicken Breast Recipes to Make You Like White Meat':'https://www.seriouseats.com/roundups/chicken-breast-recipes'\n      }\n    },\n    'Thighs/Drumsticks': {\n      type: 'Bone-in Poultry',\n      defaultSaltByWeight: 1.15,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/1702/1702761.svg',\n      instruction: 'Salt at least 40 min before or up to 48 hours before cooking. If you\\'re wondering why this calculator tells you to use more salt for bone-in vs boneless poultry, it\\'s because bone-in poultry usually has ~2x the fat of chicken breast',\n      resources: {\n        \n      }\n    },\n    'Whole Bird': {\n      type: 'Whole Bird',\n      defaultSaltByWeight: 1.25,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/1046/1046853.svg',\n      instruction: meatInstructionRoast,\n      resources: {\n        'How to spatchcock a chicken - BBC Good Food': 'https://www.youtube.com/watch?v=pod4x5NJoYI&ab_channel=BBCGoodFood',\n        'Expertly Spiced and Glazed Roast Turkey (replace their salt amount with calculator output for your bird)': 'https://www.bonappetit.com/recipe/expertly-spiced-and-glazed-roast-turkey',\n        'The Food Lab: How (Not) to Roast a Chicken':'https://www.seriouseats.com/2010/05/how-to-roast-a-chicken-butterflied-tips.html'\n      }\n    },\n    'Ground Poultry': {\n      type: 'Ground Poultry',\n      defaultSaltByWeight: 0.75,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/2851/2851143.svg',\n      instruction: meatInstructionGround,\n      resources: {\n        'The Burger Lab: Salting Ground Beef (I know you aren\\'t cooking beef, but this still applies!)' : 'https://aht.seriouseats.com/2009/12/the-burger-lab-salting-ground-beef.html'\n      }\n    }\n  },\n\n  Beef: {\n    'Boneless Steak': {\n      type: 'Boneless Steak',\n      defaultSaltByWeight: 1.1,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/2177/2177533.svg',\n      instruction: meatInstruction,\n      resources: {\n        'The Food Lab\\'s Complete Guide to Pan-Seared Steaks':'https://www.seriouseats.com/2012/12/the-food-lab-complete-guide-to-pan-seared-steaks.html#salt',\n        'The Food Lab\\'s Complete Guide to Sous Vide Steak': 'https://www.seriouseats.com/2015/06/food-lab-complete-guide-to-sous-vide-steak.html'\n      }\n    },\n    'Bonein Steak': {\n      type: 'Bonein Steak',\n      defaultSaltByWeight: 1.1,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/933/933310.svg',\n      instruction: meatInstruction,\n      resources: {\n        'The Food Lab\\'s Complete Guide to Pan-Seared Steaks':'https://www.seriouseats.com/2012/12/the-food-lab-complete-guide-to-pan-seared-steaks.html#salt',\n        'The Food Lab\\'s Complete Guide to Sous Vide Steak': 'https://www.seriouseats.com/2015/06/food-lab-complete-guide-to-sous-vide-steak.html'\n      }\n    },\n    'Beef Ribs': {\n      type: 'Beef Ribs',\n      defaultSaltByWeight: 1.25,\n      img: \"https://www.flaticon.com/svg/static/icons/svg/604/604810.svg\",\n      instruction: meatInstructionBasic,\n    },\n    '80/20 Ground Beef': {\n      type: 'Ground Beef',\n      defaultSaltByWeight: 1,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/2851/2851143.svg',\n      instruction: meatInstructionGround,\n      resources: {\n        'The Burger Lab: Salting Ground Beef' : 'https://aht.seriouseats.com/2009/12/the-burger-lab-salting-ground-beef.html',\n        'Science: Does Fattier Meat Need More Salt? We Taste Steak, Burgers, Turkey, Pork to Find Out' : 'https://www.youtube.com/watch?v=csF1G11PsyU&feature=emb_title&ab_channel=America%27sTestKitchen'\n      }\n    },\n    '90/10 Ground Beef': {\n      type: 'Ground Beef',\n      defaultSaltByWeight: 0.9,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/2851/2851143.svg',\n      instruction: meatInstructionGround,\n      resources: {\n        'The Burger Lab: Salting Ground Beef' : 'https://aht.seriouseats.com/2009/12/the-burger-lab-salting-ground-beef.html',\n        'Science: Does Fattier Meat Need More Salt? We Taste Steak, Burgers, Turkey, Pork to Find Out' : 'https://www.youtube.com/watch?v=csF1G11PsyU&feature=emb_title&ab_channel=America%27sTestKitchen'\n      }\n    }\n  },\n\n  Pork: {\n    'Boneless Pork': {\n      type: 'Boneless Pork',\n      defaultSaltByWeight: 1,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/2177/2177533.svg',\n      instruction: meatInstructionBasic,\n    },\n    'Bone-in Pork': {\n      type: 'Bone-in Pork',\n      defaultSaltByWeight: 1,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/933/933310.svg',\n      instruction: meatInstructionBasic,\n    },\n    'Pork Ribs': {\n      type: 'Pork Ribs',\n      defaultSaltByWeight: 1.2,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/815/815986.svg',\n      instruction: meatInstructionBasic,\n    },\n    'Ground Pork': {\n      type: 'Ground Pork',\n      defaultSaltByWeight: 1.25,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/2851/2851143.svg',\n      instruction: meatInstructionBasic,\n      resources: {\n        'The Burger Lab: Salting Ground Beef (I know you aren\\'t cooking beef, but this still applies!)' : 'https://aht.seriouseats.com/2009/12/the-burger-lab-salting-ground-beef.html'\n      }\n    },\n    'Pork Belly': {\n      type: 'Pork Belly',\n      defaultSaltByWeight: 1.3,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/1582/1582267.svg',\n      instruction: meatInstructionBasic,\n    }\n  },\n\n  Lamb: {\n    'Boneless Lamb': {\n      type: 'Boneless Lamb',\n      defaultSaltByWeight: 1,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/2177/2177533.svg',\n      instruction: meatInstructionBasic,\n    },\n    'Bone-in Lamb': {\n      type: 'Bone-in Lamb',\n      defaultSaltByWeight: 1.1,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/1702/1702779.svg',\n      instruction: meatInstructionBasic,\n    }\n  },\n\n  Seafood: {\n    'Scallops': {\n      type: 'Scallops',\n      defaultSaltByWeight: 0.75,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/1113/1113359.svg',\n      instruction: 'If you\\'re pan searing your scallops, start by patting them dry. Then salt and let sit on paper towels for 15 minutes.',\n      resources: {\n        'The Food Lab: How to Sear Scallops':'https://www.seriouseats.com/2015/08/the-food-lab-how-to-sear-scallops.html'\n      }\n    },\n    'Shrimp': {\n      type: 'Shrimp',\n      defaultSaltByWeight: 0.75,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/3885/3885575.svg',\n      instruction: 'Toss in salt then leave in the fridge for at least 15 min and up to an hour. If the shells are on, go for the longer end.',\n      resources: {\n        'Easy Techniques to Improve Any Shrimp Recipe':'https://www.seriouseats.com/2015/10/how-to-cook-shrimp-grill-poach-stir-fry-saute.html'\n      }\n    },\n    'White Fish': {\n      type: 'White Fish',\n      defaultSaltByWeight: 0.75,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/2255/2255609.svg',\n      instruction: fishInstruction,\n    },\n    'Red Fish': {\n      type: 'Red Fish',\n      defaultSaltByWeight: 0.75,\n      img: 'https://www.flaticon.com/svg/static/icons/svg/84/84877.svg',\n      instruction: fishInstruction,\n    },\n  }\n}","export const Salts = {\n  \"Table Salt\": {\n    name: \"Table Salt\",\n    gramsPerTbsp: 18.6\n  },\n  \"Maldon\": {\n    name:\"Maldon\", \n    gramsPerTbsp: 8.4\n  },\n  \"Sel Gris\": {\n    name: \"Sel Gris\",\n    gramsPerTbsp: 13\n  },\n  \"Fine Sea\": {\n    name: \"Fine Sea\",\n    gramsPerTbsp: 14.6\n  },\n  \"Morton's Kosher\": {\n    name: \"Morton's Kosher\",\n    gramsPerTbsp: 14.75\n  },\n  \"Diamond Kosher\": {\n    name: \"Diamond Kosher\",\n    gramsPerTbsp: 9.75\n  }\n}","// Convert salt weight in grams into tbsp/tsp \nconst getStringifiedOutput = (tbsps) => {\n\n  if (tbsps === 0) {\n    return 'ERROR: TBSPS 0'\n  }\n\n  //  Rounding for tsps. Rounds either up or down. \n  const roundToNearestEighthOrSixth = (num) => {\n    const qs = Math.abs(num - (Math.round(num * 8) / 8))\n    const ts = Math.abs(num - (Math.round(num * 6) / 6))\n    if (qs < ts) {\n      return (Math.round(num * 8) / 8)\n    } else {\n      return (Math.round(num * 6) / 6)\n    }\n  }\n\n  // Rounding for cups. Rounds down. \n  const roundDownToNearestQuarterOrThird = (num) => {\n    const quarters = (Math.floor(num * 4) / 4)\n    const sixths = (Math.floor(num * 3) / 3)\n    return (num - quarters > num - sixths) ? sixths : quarters\n  }\n\n  // Rounding for tbsps. Rounds down. \n  const roundDownToNearestHalfOrWhole = (num) => {\n    const half = (Math.floor(num * 2) / 2)\n    const whole = Math.floor(num)\n    return (num - half < num - whole) ? half : whole\n  }\n\n  let cups = 0\n  let tsps = 0\n\n  // Find number of cups\n  const cupsCalc = tbsps / 16\n  // If the number of cups is > 0.25 (quarter cup)\n  if (cupsCalc > 0.25) {\n    // Then determine number of cups, rounded down to the nearest quarter or third\n    cups = roundDownToNearestQuarterOrThird(tbsps / 16)\n    // Convert back and pass any amount rounded down into tbsps \n    tbsps = ((cupsCalc - cups)*16)\n  }\n\n  // Process tbsps & tsps\n  const tbspsCalc = tbsps\n  tbsps = roundDownToNearestHalfOrWhole(tbsps)\n  tsps = roundToNearestEighthOrSixth((tbspsCalc - tbsps) * 3)\n\n  const output = []\n\n  const formatString = (measurement, value) => {\n    value = value.toFixed(2)\n    const table = {\n      \".00\":'',\n      \".13\":'⅛',\n      \".17\":'⅛',\n      \".25\":'¼',\n      \".33\": '⅓',\n      \".38\": '⅜',\n      \".50\": '½',\n      \".63\": '⅝',\n      \".67\": '⅔',\n      \".75\":'¾',    \n      \".83\":'¾',\n      \".88\": '⅞',\n    }\n\n    if (value) {\n      if (value > 1) {\n        // Make measurement plural if greater than one\n        measurement = `${measurement}s`\n      } else {\n        // Remove leading 0 if value is less than one\n        if(value[0] === '0') {\n          value = value.replace(\"0\",\"\")\n        }\n      }\n      \n      if (value > 0) {\n        value = value.replace(value.slice(-3),table[value.slice(-3)])\n        output.push(`${value} ${measurement}`)\n      }\n    }\n  }\n\n  // Format numbers \n  formatString('cup', cups)\n  formatString('tablespoon', tbsps)\n  formatString('teaspoon', tsps)\n\n  return (output.length > 0) ? output.join(\" + \") : 'Your inputs are yielding close to 0 grams of salt!'\n}\n\nexport default getStringifiedOutput\n\n  ","import React, { useEffect } from 'react'\nimport { Meats } from './Meats'\nimport { Salts } from './Salts'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport getStringifiedOutput from './getStringifiedOutput'\n\nconst Output = ({meatCategory, meatType, weightValue, weightType, saltByWeight, saltType}) => {\n\n  useEffect(()=>{\n    if(document.querySelector(\".savedMessage\")) {\n      document.querySelector(\".savedMessage\").innerHTML = ``\n    }\n  })\n  // Change instructions based on the weight of the protein\n\n  // Meat weight in grams * salt percentage = salt weight in grams\n  const weightInGrams = weightType === 'Lbs' ? 453.592 * weightValue * (saltByWeight/100) : 1000 * weightValue * (saltByWeight/100)\n\n  const getTbsps = () => {\n    if (saltType) {\n      return weightInGrams / Salts[saltType].gramsPerTbsp\n    }\n    return undefined\n  }\n    \n  const saveCalculation = () => {\n    const calculation = {\n      'meatType': meatType,\n      'saltType': saltType,\n      'weightType': weightType,\n      'weightValue': weightValue,\n      'saltByWeight': saltByWeight,\n      'timestamp': new Date().toDateString()\n    }\n    if (meatType && saltByWeight) {\n      localStorage.setItem(`${meatType}`, JSON.stringify(calculation))\n    }\n    document.querySelector(\".savedMessage\").innerHTML = `Saved! Next time you select ${meatType.toLowerCase()} you will see these settings above the slider`\n  }\n\n  const renderOutput = () => {\n    const renderInstructions = () => {\n\n      const renderResources = (resources) => {\n        const arr = []\n\n        for (const resource in resources) {\n          arr.push(<li key={`${resource}`}><a href={resources[resource]}>{resource}</a></li>)\n        }\n\n        const renderResourceTitle = () => {\n          if (arr.length > 1) {\n            return `Resources for cooking ${meatType.toLowerCase()}:`\n          } else if (arr.length === 1) {\n            return `A useful resource for cooking ${meatType.toLowerCase()}:`\n          } else {\n            return \n          }\n        }\n\n        return (\n          <>\n            {arr.length>1 ? <hr className=\"outputHr\"/> : null}\n            <span className=\"card-subtitle\">{renderResourceTitle()}</span>\n            <ul>\n              {arr}\n            </ul>\n          </>\n        )\n      }\n\n      if (meatType && (weightValue > 0) && weightType && saltByWeight && saltType && Meats[meatCategory][meatType] !== undefined) {\n        \n        return (\n          // Output text\n          <div>\n            <p>For {weightValue} {(Number(weightValue) === 1) ? weightType.slice(0,-1) : weightType} of {meatType.toLowerCase()}, use {getStringifiedOutput(getTbsps())} of {saltType.toLowerCase()} ({weightInGrams ? weightInGrams.toFixed(2) : 'ERROR NO WEIGHT IN GRAMS'} grams).</p>\n            <p>{Meats[meatCategory][meatType].instruction} </p>\n            <Button className=\"saveCalculationButton\" size=\"sm\" onClick={()=>{saveCalculation()}}>Remind me of these selections the next time I select {meatType.toLowerCase()}</Button>\n            <div className=\"savedMessage\"></div>\n            <div>{renderResources(Meats[meatCategory][meatType].resources)}</div>\n          </div>\n        )\n      } else {\n          return (\n            <ul>\n              {meatType ? null : <li key=\"1\">Please select a type of protein</li>}\n              {weightValue ? null : <li key=\"2\">Please enter protein weight</li>}\n              {weightType ? null : <li key=\"3\">Please select lbs or kgs</li>}\n              {saltType ? null : <li key=\"4\">Please select type of salt</li>}\n            </ul>\n          )\n        }\n      }\n\n    \n      return (\n        <div>\n          <Card className=\"output\">\n            <Card.Body>\n              <Card.Title>Salting Suggestions</Card.Title>\n              <Card.Text as=\"span\" style={{animation: \"fadeIn 1s\"}}>\n                {renderInstructions()}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </div>\n      )\n    }\n\n    \n\n    return (\n      <div>{renderOutput()}</div>\n    )\n}\n\nexport default Output","import React from 'react'\n\nconst About = () => {\n  return (\n    <div id=\"about\">\n      <h2>About</h2>\n      <p>\n          I was so surprised to find out that table salt is <b><i>twice</i> as salty (it's 2x as dense)</b> as Diamond kosher salt. The vast majority of recipes never specify what type of salt you should be using. For example, a baked salmon recipe might say to use \"1 tsp of salt\". If the writer uses kosher salt, and you used table salt, then you just ended up with an oversalted dish! This calculator is made to help you avoid that situation. Use this dry brining calculator if:\n      </p>\n      <ul>\n          <li>\n              You are working with a different type of salt or meat than you're used to \n          </li>\n          <li>\n              If a recipe tells you to use \"1 tsp of salt\" \n          </li>\n          <li>\n              If you are new to cooking/dry brining, and you have no idea how much salt to use\n          </li>\n      </ul>\n      <p>\n          Samins Nosrat's <a href=\"https://amzn.to/2FRymUZ\">Salt Fat Acid Heat</a> enlightened me about using salt and was the inspiration for this calculator. She's convinced me that <a href=\"/faq\">dry brining (salting in advance)</a> is mandatory, and I've never looked back. I'm not affiliated with Samin or <a href=\"https://amzn.to/2FRymUZ\">Salt Fat Acid Heat</a>, but I do highly recommend it for beginner/intermediate cooks who want to improve their cooking. While I'm not directly affiliated, the links in this paragraph are Amazon affiliate links, so if you click the link and buy the book, you will be supporting this site too! \n      </p>\n  </div>\n  )\n}\n\nexport default About","\nimport { Meats } from './Meats'\nimport { Salts } from './Salts'\n\nexport const getMeatCategoryRadios = () => {\n  return Object.keys(Meats).map((category)=>{return {name: `${category}`, value:`${category}`}})\n}\n  \nexport const getMeatTypeRadios = (meatCategory) => {\n  if (meatCategory) {\n    return Object.keys(Meats[meatCategory]).map((meat)=>{\n      return {name: meat, value: meat, icon: Meats[meatCategory][meat].img}\n    })\n  }\n}\n\nexport const getSaltTypeRadios = () => {\n  return Object.keys(Salts).map( (salt) => {\n    return {name: Salts[salt].name, value: Salts[salt].name, subtext: `${Salts[salt].gramsPerTbsp} g/tbsp`}\n  })\n}\n","import React, { useEffect, useState } from \"react\";\nimport Slider from \"./Slider\";\nimport Selection from \"./Selection\";\nimport Form from \"react-bootstrap/Form\";\nimport Output from \"./Output\";\nimport About from \"./About\";\nimport { Meats } from \"./Meats\";\nimport {\n  getMeatCategoryRadios,\n  getMeatTypeRadios,\n  getSaltTypeRadios,\n} from \"./Radios\";\n\n// Whenever an input is changed, useEffect will run a timer\n// If the form is completely filled out and the timer runs out, save that to local storage\n//\n\nconst SaltForm = () => {\n  const [meatCategory, setMeatCategory] = useState();\n  const [meatType, setMeatType] = useState();\n  const [weightValue, setWeightValue] = useState(0);\n  const [weightType, setWeightType] = useState();\n  const [saltType, setSaltType] = useState();\n  const [saltByWeight, setSaltByWeight] = useState();\n\n  useEffect(() => {\n    // Handles dependent radio buttons. If the meat type is selected and then meat category is changed, deselect meatType\n    if (meatCategory && meatType) {\n      if (Meats[meatCategory][meatType] === undefined) {\n        setMeatType(undefined);\n      }\n    }\n  }, [meatCategory, meatType]);\n\n  // Selection Components accept a callback to update state managed within app\n  // Selection accepts an array of objects, currently returned from the functions in /Radios\n  return (\n    <div>\n      <div className=\"form\">\n        <Selection\n          title=\"What kind of protein are you dry brining?\"\n          callback={setMeatCategory}\n          radioOptions={getMeatCategoryRadios()}\n        />\n        <Selection\n          title={`More specifically, what kind of ${\n            meatCategory ? meatCategory.toLowerCase() : \"protein\"\n          } are you dry brining?`}\n          callback={setMeatType}\n          radioOptions={getMeatTypeRadios(meatCategory)}\n        />\n        <h3 className=\"formTitle\">{`How much does the ${\n          meatType ? meatType.toLowerCase() : \"protein\"\n        } weigh?`}</h3>\n        <div className=\"weightInputGroup\">\n          <Form.Control\n            className=\"weightInput\"\n            type=\"text\"\n            inputmode=\"decimal\"\n            min=\"0\"\n            onChange={(e) => {\n              setWeightValue(e.target.value);\n            }}\n            value={weightValue}\n          />\n          <Selection\n            title={null}\n            callback={setWeightType}\n            radioOptions={[\n              { name: `Lbs`, value: `Lbs` },\n              { name: `Kgs`, value: `Kgs` },\n            ]}\n          />\n        </div>\n        <Selection\n          title={`What type of salt are you using?`}\n          callback={setSaltType}\n          radioOptions={getSaltTypeRadios()}\n        />\n        <Slider\n          title={`What is your target % salt by weight?`}\n          meatTypeObj={meatType ? Meats[meatCategory][meatType] : undefined}\n          meatType={meatType}\n          callback={setSaltByWeight}\n        />\n      </div>\n      <div className=\"output\">\n        <Output\n          meatCategory={meatCategory}\n          meatType={meatType}\n          weightValue={weightValue}\n          weightType={weightType}\n          saltByWeight={saltByWeight}\n          saltType={saltType}\n        />\n      </div>\n      <About />\n    </div>\n  );\n};\n\nexport default SaltForm;\n","import Header from './Header'\nimport Faq from './Faq'\nimport Footer from './Footer'\nimport {BrowserRouter, Route , Switch} from 'react-router-dom'\nimport SaltForm from './SaltForm'\n\n\n\nconst App = () => {\n\n  return (\n      <BrowserRouter>\n        <div className=\"container\">\n          <Header />\n            <Switch>\n              <Route exact path=\"/\" component={SaltForm}/>\n              <Route exact path=\"/faq\" component={Faq}/>\n            </Switch>\n          <Footer />\n        </div>\n      </BrowserRouter>\n  )\n}\n\nexport default App","import React from 'react' \nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './style.scss';\n\nReactDOM.render(<App />, document.querySelector(\"#root\"))"],"sourceRoot":""}